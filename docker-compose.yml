services:
  #  backend:
  #    image: backend
  #    build:
  #      context: .
  #      dockerfile: backend/Dockerfile
  #    restart: always
  #    environment:
  #      - ASPNETCORE_ENVIRONMENT=Development
  #      - DB_CONNECTION_STRING=$DB_CONNECTION_STRING
  #    networks:
  #      - back-net
  #      - front-net
  #    ports:
  #      - "5163:8080"
  #    depends_on:
  #      db:
  #        condition: service_healthy

  db:
    image: mysql:latest
    container_name: database
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    restart: always
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    networks:
      - back-net
    ports:
      - "3307:3306"
    volumes:
      - db:/var/lib/mysql
      - "./database/init/init.sql:/docker-entrypoint-initdb.d/init.sql"
      - "./database/init/seed.sql:/docker-entrypoint-initdb.d/seed.sql"
      - "./database/stored_procedure/sp_users.sql:/docker-entrypoint-initdb.d/sp_users.sql"
      - "./database/stored_procedure/sp_Auth.sql:/docker-entrypoint-initdb.d/sp_Auth.sql"
      - "./database/stored_procedure/sp_Checks.sql:/docker-entrypoint-initdb.d/sp_Checks.sql"
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10

  frontend:
    build:
      context: frontend
    restart: always
    networks:
      - front-net
    ports:
      - "3000:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - db
    environment:
      - API_URL={API_URL}

volumes:
  db:

networks:
  front-net:
  back-net:
